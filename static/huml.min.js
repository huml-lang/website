var Z=Object.freeze({INLINE_DICT:1,MULTILINE_DICT:2,EMPTY_LIST:3,EMPTY_DICT:4,MULTILINE_LIST:5,INLINE_LIST:6,SCALAR:7}),j=[["true",!0],["false",!1],["null",null],["nan",NaN],["inf",1/0]],B={'"':'"',"\\":"\\","/":"/",n:`
`,t:"\t",r:"\r",b:"\b",f:"\f"},F=[["0x",16],["0o",8],["0b",2]];class K extends Error{constructor(z,H){super(`line ${H}: ${z}`);this.name="HUMLError",this.line=H}}class U{constructor(z){this.data=z,this.pos=0,this.line=1}parse(){if(this.data.length===0)throw new Error("empty document is undefined");if(this.peekString("%HUML")){if(this.advance(5),!this.done()&&this.data[this.pos]===" "){this.advance(1);let J=this.pos;while(!this.done()&&![" ",`
`,"#"].includes(this.data[this.pos]))this.pos++;if(this.pos>J){let Q=this.data.substring(J,this.pos);if(Q!=="v0.1.0")throw this.error(`unsupported version '${Q}'. expected 'v0.1.0'`)}}this.consumeLine()}if(this.skipBlankLines(),this.done())throw this.error("empty doc is undefined");if(this.getCurIndent()!==0)throw this.error("root element must not be indented");if(this.peekString("::"))throw this.error("'::' indicator not allowed at document root");if(this.peekString(":")&&!this.hasKeyValuePair())throw this.error("':' indicator not allowed at document root");let z=this.getRootType(),D={[Z.INLINE_DICT]:()=>this.assertRootEnd(this.parseInlineVectorContents(Z.INLINE_DICT),"root inline dict"),[Z.MULTILINE_DICT]:()=>this.parseMultilineDict(0),[Z.EMPTY_LIST]:()=>{return this.advance(2),this.consumeLine(),this.assertRootEnd([],"root list")},[Z.EMPTY_DICT]:()=>{return this.advance(2),this.consumeLine(),this.assertRootEnd({},"root dict")},[Z.MULTILINE_LIST]:()=>this.parseMultilineList(0),[Z.INLINE_LIST]:()=>this.assertRootEnd(this.parseInlineVectorContents(Z.INLINE_LIST),"root inline list"),[Z.SCALAR]:()=>{let J=this.parseValue(0);return this.consumeLine(),this.assertRootEnd(J,"root scalar value")}}[z];if(!D)throw this.error("internal error: unknown document type");return D()}getRootType(){if(this.hasKeyValuePair())return this.hasInlineDictAtRoot()?Z.INLINE_DICT:Z.MULTILINE_DICT;let z=[[()=>this.peekString("[]"),Z.EMPTY_LIST],[()=>this.peekString("{}"),Z.EMPTY_DICT],[()=>this.peekChar(this.pos)==="-",Z.MULTILINE_LIST],[()=>this.hasInlineListAtRoot(),Z.INLINE_LIST]];for(let[H,D]of z)if(H())return D;return Z.SCALAR}assertRootEnd(z,H){if(this.skipBlankLines(),!this.done())throw this.error(`unexpected content after ${H}`);return z}parseMultilineDict(z){let H={};while(!0){if(this.skipBlankLines(),this.done())break;let D=this.getCurIndent();if(D<z)break;if(D!==z)throw this.error(`bad indent ${D}, expected ${z}`);if(!this.isKeyStart())throw this.error(`invalid character '${this.data[this.pos]}', expected key`);let J=this.parseKey();if(J in H)throw this.error(`duplicate key '${J}' in dict`);let Q=this.parseIndicator(),W;if(Q===":"){this.assertSpace("after ':'");let $=this.peekString("```")||this.peekString('"""');if(W=this.parseValue(D),!$)this.consumeLine()}else W=this.parseVector(D+2);H[J]=W}return H}parseMultilineList(z){let H=[];while(!0){if(this.skipBlankLines(),this.done())break;let D=this.getCurIndent();if(D<z)break;if(D!==z)throw this.error(`bad indent ${D}, expected ${z}`);if(this.data[this.pos]!=="-")break;this.advance(1),this.assertSpace("after '-'");let J;if(this.peekString("::"))this.advance(2),J=this.parseVector(D+2);else J=this.parseValue(D),this.consumeLine();H.push(J)}return H}getMultilineVectorType(z){if(this.skipBlankLines(),this.done())throw this.error("ambiguous empty vector after '::'. Use [] or {}.");if(this.getCurIndent()<z)throw this.error("ambiguous empty vector after '::'. Use [] or {}.");return this.data[this.pos]==="-"?"list":"dict"}parseVector(z){let H=this.pos;if(this.skipSpaces(),this.done()||this.data[this.pos]===`
`||this.data[this.pos]==="#"){this.pos=H,this.consumeLine();let D=this.getMultilineVectorType(z),J=this.getCurIndent();return D==="list"?this.parseMultilineList(J):this.parseMultilineDict(J)}return this.pos=H,this.assertSpace("after '::'"),this.parseInlineVector()}parseInlineVector(){if(this.peekString("[]"))return this.advance(2),this.consumeLine(),[];if(this.peekString("{}"))return this.advance(2),this.consumeLine(),{};return this.hasInlineDict()?this.parseInlineVectorContents(Z.INLINE_DICT):this.parseInlineVectorContents(Z.INLINE_LIST)}parseInlineVectorContents(z){let H=z===Z.INLINE_DICT?{}:[],D=!0;while(!this.done()&&this.data[this.pos]!==`
`&&this.data[this.pos]!=="#"){if(!D)this.expectComma();if(D=!1,z===Z.INLINE_DICT){let J=this.parseKey();if(this.done()||this.data[this.pos]!==":")throw this.error("expected ':' in inline dict");this.advance(1),this.assertSpace("in inline dict"),H[J]=this.parseValue(0)}else H.push(this.parseValue(0));if(!this.done()&&this.data[this.pos]===" "){let J=this.pos+1;while(J<this.data.length&&this.data[J]===" ")J++;if(J<this.data.length&&this.data[J]===",")this.skipSpaces();else break}}return this.consumeLine(),H}parseKey(){if(this.skipSpaces(),this.peekChar(this.pos)==='"')return this.parseString();let z=this.pos;while(!this.done()&&(this.isAlphaNum(this.data[this.pos])||this.data[this.pos]==="-"||this.data[this.pos]==="_"))this.pos++;if(this.pos===z)throw this.error("expected a key");return this.data.substring(z,this.pos)}parseIndicator(){if(this.done()||this.data[this.pos]!==":")throw this.error("expected ':' or '::' after key");if(this.advance(1),!this.done()&&this.data[this.pos]===":")return this.advance(1),"::";return":"}parseValue(z){if(this.done())throw this.error("unexpected end of input, expected a value");let H=this.data[this.pos];if(H==='"')return this.peekString('"""')?this.parseMultilineString(z,!1):this.parseString();if(H==="`"&&this.peekString("```"))return this.parseMultilineString(z,!0);for(let[D,J]of j)if(this.peekString(D))return this.advance(D.length),J;if(H==="+"){if(this.advance(1),this.peekString("inf"))return this.advance(3),1/0;if(this.isDigit(this.peekChar(this.pos)))return this.pos--,this.parseNumber();throw this.error("invalid character after '+'")}if(H==="-"){if(this.advance(1),this.peekString("inf"))return this.advance(3),-1/0;if(this.isDigit(this.peekChar(this.pos)))return this.pos--,this.parseNumber();throw this.error("invalid character after '-'")}if(this.isDigit(H))return this.parseNumber();throw this.error(`unexpected character '${H}' when parsing value`)}parseString(){this.advance(1);let z="";while(!this.done()){let H=this.data[this.pos];if(H==='"')return this.advance(1),z;if(H===`
`)throw this.error("newlines not allowed in single-line strings");if(H==="\\"){if(this.advance(1),this.done())throw this.error("incomplete escape sequence");let D=this.data[this.pos];if(B.hasOwnProperty(D))z+=B[D];else if(D==="u"){if(this.pos+4>=this.data.length)throw this.error("incomplete unicode escape sequence \\u");let J=this.data.substring(this.pos+1,this.pos+5),Q=parseInt(J,16);if(isNaN(Q))throw this.error(`invalid unicode escape sequence \\u${J}`);z+=String.fromCharCode(Q),this.advance(4)}else throw this.error(`invalid escape character '\\${D}'`)}else z+=H;this.advance(1)}throw this.error("unclosed string")}parseMultilineString(z,H){let D=this.data.substring(this.pos,this.pos+3);this.advance(3),this.consumeLine();let J=H?(W,$)=>{let G=z+2;if(W.length>=G&&this.isSpaceString(W.substring(0,G)))return W.substring(G);return W}:(W)=>W.trim(),Q=[];while(!this.done()){let W=this.pos,$=0;while(!this.done()&&this.data[this.pos]===" ")$++,this.pos++;if(this.peekString(D)){if($!==z)throw this.error(`multiline closing delimiter must be at same indentation as the key (${z} spaces)`);return this.advance(3),this.consumeLine(),Q.join(`
`)}this.pos=W;let G=this.consumeLineContent();Q.push(J(G,$))}throw this.error("unclosed multiline string")}parseNumber(){let z=this.pos,H=this.peekChar(this.pos);if(H==="+"||H==="-")this.advance(1);for(let[Q,W]of F)if(this.peekString(Q))return this.parseBase(z,W,Q);let D=!1;while(!this.done()){let Q=this.data[this.pos];if(this.isDigit(Q)||Q==="_")this.advance(1);else if(Q===".")D=!0,this.advance(1);else if(["e","E"].includes(Q)){if(D=!0,this.advance(1),["+","-"].includes(this.peekChar(this.pos)))this.advance(1)}else break}let J=this.data.substring(z,this.pos).replace(/_/g,"");return D?parseFloat(J):parseInt(J,10)}parseBase(z,H,D){this.advance(D.length);let J=this.pos,W={16:(O)=>this.isHex(O),8:(O)=>O>="0"&&O<="7",2:(O)=>["0","1"].includes(O)}[H];while(!this.done()&&W(this.data[this.pos]))this.advance(1);if(this.pos===J)throw this.error("invalid number literal, requires digits after prefix");let $=this.data[z]==="-"?-1:1,G=this.data.substring(J,this.pos).replace(/_/g,"");return $*parseInt(G,H)}skipBlankLines(){while(!this.done()){let z=this.pos;if(this.skipSpaces(),this.done()){if(this.pos>z)throw this.error("trailing spaces are not allowed");return}if(![`
`,"#"].includes(this.data[this.pos]))return;if(this.data[this.pos]===`
`&&this.pos>z)throw this.error("trailing spaces are not allowed");this.pos=z,this.consumeLine()}}consumeLine(){let z=this.pos;if(this.skipSpaces(),this.done()||this.data[this.pos]===`
`){if(this.pos>z)throw this.error("trailing spaces are not allowed")}else if(this.data[this.pos]==="#"){if(this.pos===z&&this.getCurIndent()!==this.pos-this.lineStart())throw this.error("a value must be separated from an inline comment by a space");if(this.pos++,!this.done()&&![" ",`
`].includes(this.data[this.pos]))throw this.error("comment hash '#' must be followed by a space")}else throw this.error("unexpected content at end of line");let H=this.data.slice(this.pos,this.data.indexOf(`
`,this.pos));if(H.endsWith(" ")&&H.length>0)throw this.error("trailing spaces are not allowed");let D=this.data.indexOf(`
`,this.pos);if(D!==-1)this.pos=D+1,this.line++;else this.pos=this.data.length}consumeLineContent(){let z=this.pos,H=this.data.indexOf(`
`,this.pos);if(H===-1){let J=this.data.substring(z);return this.pos=this.data.length,J}let D=this.data.substring(z,H);return this.pos=H+1,this.line++,D}assertSpace(z){if(this.done()||this.data[this.pos]!==" ")throw this.error(`expected single space ${z}`);if(this.advance(1),!this.done()&&this.data[this.pos]===" ")throw this.error(`expected single space ${z}, found multiple`)}expectComma(){if(this.skipSpaces(),this.done()||this.data[this.pos]!==",")throw this.error("expected a comma in inline collection");if(this.pos>0&&this.data[this.pos-1]===" ")throw this.error("no spaces allowed before comma");this.advance(1),this.assertSpace("after comma")}getCurIndent(){let z=this.lineStart(),H=0;while(z+H<this.data.length&&this.data[z+H]===" ")H++;return H}lineStart(){let z=this.pos;if(z>0&&z<=this.data.length&&this.data[z-1]===`
`)return z;return this.data.lastIndexOf(`
`,z-1)+1}hasKeyValuePair(){let z=this.pos;try{return this.parseKey(),!this.done()&&this.data[this.pos]===":"}catch{return!1}finally{this.pos=z}}hasInlineDict(){let z=this.pos;while(z<this.data.length&&this.data[z]!==`
`&&this.data[z]!=="#"){if(this.data[z]===":"){if(z+1>=this.data.length||this.data[z+1]!==":")return!0}z++}return!1}hasInlineListAtRoot(){let z=this.data.slice(this.pos,this.data.indexOf(`
`,this.pos)),H=z.indexOf("#"),D=H>=0?z.slice(0,H):z;return D.includes(",")&&!D.includes(":")}hasInlineDictAtRoot(){let z=this.data.indexOf(`
`,this.pos),H=this.data.indexOf("#",this.pos),D=Math.min(z===-1?this.data.length:z,H===-1?this.data.length:H),J=this.data.slice(this.pos,D),Q=J.includes(":")&&!J.includes("::"),W=J.includes(",");if(!(Q&&W))return!1;return!this.data.slice(z===-1?this.data.length:z).split(`
`).slice(1).some((G)=>{let O=G.trim();return O&&!O.startsWith("#")})}isKeyStart(){return!this.done()&&(this.data[this.pos]==='"'||this.isAlpha(this.data[this.pos]))}done(){return this.pos>=this.data.length}advance(z){this.pos+=z}skipSpaces(){while(!this.done()&&this.data[this.pos]===" ")this.advance(1)}peekString(z){return this.pos+z.length<=this.data.length&&this.data.startsWith(z,this.pos)}peekChar(z){return z>=0&&z<this.data.length?this.data[z]:"\x00"}isDigit(z){return z>="0"&&z<="9"}isAlpha(z){return z>="a"&&z<="z"||z>="A"&&z<="Z"}isAlphaNum(z){return this.isAlpha(z)||this.isDigit(z)}isHex(z){return this.isDigit(z)||z>="a"&&z<="f"||z>="A"&&z<="F"}isSpaceString(z){return z.trim()===""}error(z){return new K(z,this.line)}}function M(z){if(typeof z!=="string")throw new TypeError("HUML input must be of type string");return new U(z).parse()}var C=/^[a-zA-Z][a-zA-Z0-9_-]*$/;function X(z,H,D,J=!1){if(z===null||z===void 0){D[D.length-1]+="null";return}let Q=typeof z;if(Q==="boolean")D[D.length-1]+=String(z);else if(Q==="number")D[D.length-1]+=N(z);else if(Q==="string")_(z,H,D);else if(Array.isArray(z))w(z,H,D,J);else if(Q==="object")f(z,H,D,J);else throw new Error(`Unsupported type: ${Q}`)}function N(z){if(Number.isNaN(z))return"nan";if(z===1/0)return"inf";if(z===-1/0)return"-inf";return String(z)}function _(z,H,D){if(z.includes(`
`)){let J=H-2,Q=H;D[D.length-1]+="```";let W=z.split(`
`);if(W[W.length-1]==="")W.pop();W.forEach(($)=>{D.push(" ".repeat(Q)+$)}),D.push(" ".repeat(J)+"```")}else D[D.length-1]+=JSON.stringify(z)}function w(z,H,D,J=!1){if(z.length===0){D[D.length-1]+="[]";return}let Q=J?0:H;z.forEach((W,$)=>{if(D.push(" ".repeat(Q)+"- "),q(W))D[D.length-1]+="::",X(W,Q+2,D);else X(W,Q,D)})}function f(z,H,D,J=!1){let Q=Object.entries(z);if(Q.length===0){D[D.length-1]+="{}";return}Q.sort(([$],[G])=>$.localeCompare(G));let W=J?0:H;Q.forEach(([$,G],O)=>{A($,G,W,D)})}function A(z,H,D,J){J.push(" ".repeat(D)+V(z));let Q=q(H),W=g(H);if(Q)J[J.length-1]+=W?":: ":"::";else J[J.length-1]+=": ";X(H,D+2,J)}function q(z){return z!==null&&(Array.isArray(z)||typeof z==="object"&&z.constructor===Object)}function g(z){if(Array.isArray(z))return z.length===0;if(typeof z==="object"&&z!==null)return Object.keys(z).length===0;return!1}function V(z){return C.test(z)?z:JSON.stringify(z)}function h(z,H){let D=[];if(H&&H.includeVersion)D.push("%HUML v0.1.0"),D.push("");return X(z,0,D,!0),D.push(""),D.join(`
`)}export{h as stringify,M as parse};
